{"version":3,"sources":["Components/ContactListItem/ContactListItem.module.css","Components/Filter/Filter.module.css","Components/ContactList/ContactList.module.css","Components/ContactForm/ContactForm.module.css","Redux/contacts/contacts-actions.jsx","Redux/contacts/contacts-reducer.jsx","Redux/store.jsx","Components/ContactForm/ContactForm.jsx","Components/ContactListItem/ContactListItem.jsx","Components/ContactList/ContactList.jsx","Components/Filter/Filter.jsx","App.js","index.js"],"names":["module","exports","addContact","createAction","deleteContact","filter","items","createReducer","actions","state","action","find","contact","name","payload","alert","id","_","combineReducers","contactsPersistConfig","key","storage","blacklist","rootReducer","contacts","persistReducer","contactsReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","devTools","process","persistor","persistStore","ContactForm","number","handleInputChange","event","currentTarget","value","setState","handleSubmit","e","preventDefault","shortid","generate","props","onSubmit","reset","this","className","styles","form","label","input","nameId","type","onChange","pattern","title","required","telId","button","Component","connect","dispatch","contactActions","onDeleteContact","contactsActions","item","onClick","normalizedFilter","toLowerCase","includes","contact_list","map","target","text","App","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.1c1b8bdb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ContactListItem_item__3Nggx\",\"contact\":\"ContactListItem_contact__3FfgT\",\"button\":\"ContactListItem_button__2H-kL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"Filter_text__3qIkb\",\"label\":\"Filter_label__24XB8\",\"input\":\"Filter_input__1vnn6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact_list\":\"ContactList_contact_list__wqaep\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__2GNrE\",\"name\":\"ContactForm_name__1NcdE\",\"button\":\"ContactForm_button__2_tiL\",\"label\":\"ContactForm_label__2O4-H\",\"input\":\"ContactForm_input__3Rcyz\"};","/* eslint-disable import/no-anonymous-default-export */\r\nimport { createAction } from '@reduxjs/toolkit';\r\n\r\nconst addContact = createAction('contacts/add');\r\n\r\nconst deleteContact = createAction('contacts/delete');\r\n\r\nconst filter = createAction('contacts/filter');\r\n\r\nexport default {\r\n  addContact,\r\n  deleteContact,\r\n  filter,\r\n};\r\n// const addContact = data => ({\r\n//   type: types.ADD,\r\n//   payload: data,\r\n// });\r\n\r\n// const deleteContact = contactId => ({\r\n//   type: types.DELETE,\r\n//   payload: contactId,\r\n// });\r\n\r\n// const filter = value => ({\r\n//   type: types.FILTER,\r\n//   payload: value,\r\n// });\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport actions from './contacts-actions';\r\n\r\nconst items = createReducer([], {\r\n  [actions.addContact]: (state, action) => {\r\n    if (state.find(contact => contact.name === action.payload.name)) {\r\n      alert(`${action.payload.name} is already in contacts`);\r\n      return state;\r\n    } else {\r\n      return [action.payload, ...state];\r\n    }\r\n  },\r\n  [actions.deleteContact]: (state, action) =>\r\n    state.filter(contact => contact.id !== action.payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [actions.filter]: (_, action) => action.payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n});\r\n\r\n// const filter = (state = '', { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.FILTER:\r\n//       return payload;\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const items = (state = [], { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.ADD:\r\n//       if (state.find(contact => contact.name === payload.name)) {\r\n//         alert(`${payload.name} is already in contacts`);\r\n//         return state;\r\n//       } else {\r\n//         return [payload, ...state];\r\n//       }\r\n\r\n//     case types.DELETE:\r\n//       return state.filter(contact => contact.id !== payload);\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n","/* eslint-disable import/no-anonymous-default-export */\r\nimport {\r\n  configureStore,\r\n  getDefaultMiddleware,\r\n  combineReducers,\r\n} from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport contactsReducers from './contacts/contacts-reducer';\r\n\r\nconst contactsPersistConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n  blacklist: ['filter'],\r\n};\r\n\r\nconst rootReducer = combineReducers({\r\n  contacts: persistReducer(contactsPersistConfig, contactsReducers),\r\n});\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducer,\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport default { store, persistor };\r\n","import { Component } from 'react';\r\nimport shortid from 'shortid';\r\nimport { connect } from 'react-redux';\r\nimport contactActions from '../../Redux/contacts/contacts-actions';\r\nimport styles from './ContactForm.module.css';\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  handleInputChange = event => {\r\n    const { name, value } = event.currentTarget;\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    const contact = {\r\n      id: shortid.generate(),\r\n      name: this.state.name,\r\n      number: this.state.number,\r\n    };\r\n\r\n    this.props.onSubmit(contact);\r\n\r\n    this.reset();\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({ name: '', number: '' });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit} className={styles.form}>\r\n        <label className={styles.label}>\r\n          <span className={styles.name}>Name</span>\r\n          <input\r\n            className={styles.input}\r\n            id={this.nameId}\r\n            type=\"text\"\r\n            value={this.state.name}\r\n            onChange={this.handleInputChange}\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n          />\r\n        </label>\r\n        <label className={styles.label}>\r\n          <span className={styles.name}>Number</span>\r\n          <input\r\n            className={styles.input}\r\n            id={this.telId}\r\n            value={this.state.number}\r\n            onChange={this.handleInputChange}\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\r\n            title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\r\n            required\r\n          />\r\n        </label>\r\n        <button className={styles.button} type=\"submit\">\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onSubmit: contact => dispatch(contactActions.addContact(contact)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(ContactForm);\r\n","import PropTypes from 'prop-types';\r\nimport styles from './ContactListItem.module.css';\r\nimport { connect } from 'react-redux';\r\nimport contactsActions from '../../Redux/contacts/contacts-actions';\r\n\r\nconst ContactListItem = ({ id, name, number, onDeleteContact }) => {\r\n  return (\r\n    <li className={styles.item}>\r\n      <p className={styles.contact}>\r\n        {name}: {number}\r\n      </p>\r\n      <button\r\n        className={styles.button}\r\n        onClick={() => onDeleteContact(id)}\r\n        type=\"button\"\r\n      >\r\n        Delete\r\n      </button>\r\n    </li>\r\n  );\r\n};\r\n\r\nContactListItem.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired,\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onDeleteContact: id => dispatch(contactsActions.deleteContact(id)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(ContactListItem);\r\n","import PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport ContactListItem from '../ContactListItem/ContactListItem';\r\nimport styles from './ContactList.module.css';\r\n\r\nconst ContactList = ({ contacts }) => (\r\n  <ul className={styles.contact_list}>\r\n    {contacts.map(({ name, number, id }) => (\r\n      <ContactListItem name={name} number={number} key={id} id={id} />\r\n    ))}\r\n  </ul>\r\n);\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }),\r\n  ),\r\n};\r\n\r\n// const normalizedFilter = this.state.filter.toLowerCase();\r\n\r\n// const visibleContacts = this.state.contacts.filter(contact =>\r\n//   contact.name.toLowerCase().includes(normalizedFilter),\r\n// );\r\n\r\nconst mapStateToProps = state => {\r\n  const { filter, items } = state.contacts;\r\n\r\n  const normalizedFilter = filter.toLowerCase();\r\n  const visibleContacts = items.filter(contact =>\r\n    contact.name.toLowerCase().includes(normalizedFilter),\r\n  );\r\n\r\n  return {\r\n    contacts: visibleContacts,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(ContactList);\r\n","import styles from './Filter.module.css';\r\nimport { connect } from 'react-redux';\r\nimport contactsActions from '../../Redux/contacts/contacts-actions';\r\n\r\nconst Filter = ({ value, onChange }) => (\r\n  <label className={styles.label}>\r\n    <span className={styles.text}>Find contacts by name</span>\r\n    <input\r\n      className={styles.input}\r\n      type=\"text\"\r\n      value={value}\r\n      onChange={onChange}\r\n    />\r\n  </label>\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n  value: state.contacts.filter,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onChange: event => dispatch(contactsActions.filter(event.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import { Component } from 'react';\nimport ContactForm from './Components/ContactForm/ContactForm';\nimport ContactList from './Components/ContactList/ContactList';\nimport Filter from './Components/Filter/Filter';\nimport './styles.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <>\n        <h2>Phonebook</h2>\n        <ContactForm />\n\n        <h2>Contacts</h2>\n\n        <Filter />\n        <ContactList />\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport store from './Redux/store';\nimport App from './App';\nimport 'modern-normalize/modern-normalize.css';\nimport './styles.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}